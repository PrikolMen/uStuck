:GetPos, :SetPos, :IsValid, :GetMoveType, :WorldSpaceCenter, :GetPhysicsObject = FindMetaTable( "Entity" )
:Alive, :GetHullDuck, :GetHull, :IsPlayingTaunt = FindMetaTable( "Player" )
:SetUnpacked = FindMetaTable( "Vector" )
:resume, :yield, :wait = coroutine
:sqrt, :sin, :cos, :random = math
MOVETYPE_WALK = MOVETYPE_WALK
:Iterator = player
:TraceHull = util
:Run = hook

addonName = "Unknown Stuck - AntiPlayerStuck Solution"

ustuck_enabled = CreateConVar( "ustuck_enabled", "1", FCVAR_ARCHIVE, "Enable unstuck logic for players." )\GetBool!
cvars.AddChangeCallback( "ustuck_enabled", ( _, __, value ) ->
    ustuck_enabled = value == "1"
addonName )

-- Constants
phi = math.pi * ( sqrt( 5 ) - 1 )
downOffset = Vector( 0, 0, -128 )

-- Trace
traceResult = {}
trace = { collisiongroup: COLLISION_GROUP_PLAYER, mask: MASK_PLAYERSOLID, output: traceResult }

-- Variables
samples, y, theta, radius = 0, 0, 0, 0
stuckType, mass = 0, 0
tempVector = Vector!

--[[

    Stuck Types
    0 - Not stuck
    1 - Stuck in world
    2 - Stuck in entity
    3 - Stuck in player

]]

thread = coroutine.create ->
    ::start::

    unless ustuck_enabled
        goto skipAll

    for _, ply in Iterator!
        unless IsValid( ply )
            continue

        if ply.m_iOldStuckCollisionGroup ~= nil
            ply\SetCollisionGroup( ply.m_iOldStuckCollisionGroup or 5 )

        unless Alive( ply )
            continue

        if GetMoveType( ply ) ~= MOVETYPE_WALK or IsPlayingTaunt( ply )
            continue

        phys = GetPhysicsObject( ply )
        unless phys and phys\IsValid!
            continue

        mass = phys\GetMass!

        start, mins, maxs = GetPos( ply ), GetHullDuck( ply )
        trace.mins, trace.maxs = mins, maxs
        trace.filter = ply

        stuckType = 0

        entity = nil
        for i = 1, 2
            if i == 2
                start, mins, maxs = WorldSpaceCenter( ply ), GetHullDuck( ply )
                mins[ 3 ], maxs[ 3 ] = -maxs[ 3 ] / 2, 0
                trace.mins, trace.maxs = mins, maxs

            trace.start, trace.endpos = start, start
            TraceHull( trace )

            unless traceResult.Hit
                continue

            entity = traceResult.Entity
            if IsValid( entity )
                if entity\IsRagdoll!
                    continue

                if entity\IsPlayer! and entity\Alive!
                    stuckType = 3
                else
                    phys = GetPhysicsObject( entity )
                    if phys and phys\IsValid!
                        if phys\IsMoveable! and phys\IsMotionEnabled!
                            if phys\IsPenetrating! and phys\GetMass! >= mass
                                stuckType = 2
                                break

                        else
                            stuckType = 1
                            break

            else
                stuckType = 1
                break

        if Run( "PlayerStuck", ply, traceResult, stuckType ) == false
            goto solved

        if stuckType == 3
            entity.m_iOldStuckCollisionGroup = entity\GetCollisionGroup!
            entity\SetCollisionGroup( 15 )

            ply.m_iOldStuckCollisionGroup = ply\GetCollisionGroup!
            ply\SetCollisionGroup( 15 )

            SetUnpacked( tempVector, random( 0, 1 ) == 0 and -512 or 512, random( 0, 1 ) == 0 and -512 or 512, 128 )
            ply\SetVelocity( tempVector )

            wait( 0.25 )
            goto solved

        if stuckType == 2
            goto solved

        if stuckType == 1
            mins, maxs = GetHull( ply )
            trace.mins, trace.maxs = mins, maxs

            for j = 1, 3
                samples = 16 * j
                for i = 0, samples
                    y, theta = 1 - ( i / ( samples - 1 ) ) * 2, phi * i
                    radius = sqrt( 1 - y * y )

                    SetUnpacked( tempVector, cos( theta ) * radius, y, sin( theta ) * radius )
                    trace.start = start + tempVector * 128 * j
                    trace.endpos = trace.start
                    TraceHull( trace )

                    unless traceResult.Hit
                        trace.endpos = trace.start + downOffset
                        TraceHull( trace )

                        SetPos( ply, traceResult.HitPos )
                        stuckType = 0
                        break

                if stuckType == 0
                    break

        if stuckType ~= 0
            spawnPoint = Run( "PlayerSelectSpawn", ply, false )
            if spawnPoint and IsValid( spawnPoint )
                SetPos( ply, GetPos( spawnPoint ) )
            else
                SetPos( ply, vector_origin )

        ::solved::
        yield!

    ::skipAll::
    yield!
    goto start

do

    ok, msg = false, nil

    timer.Create addonName, 0.05, 0, ->
        ok, msg = resume( thread )
        unless ok
            ErrorNoHaltWithStack( msg )

import GetPos, SetPos, IsValid, GetMoveType, GetPhysicsObject, GetCollisionBounds from FindMetaTable( "Entity" )
import Alive, IsPlayingTaunt from FindMetaTable( "Player" )
import SetUnpacked from FindMetaTable( "Vector" )
import resume, yield, wait from coroutine
import sqrt, sin, cos, random from math
MOVETYPE_WALK = MOVETYPE_WALK
import Iterator from player
import TraceHull from util
import Run from hook

addonName = "Unknown Stuck - AntiPlayerStuck Solution"

-- Constants
phi = math.pi * ( sqrt( 5 ) - 1 )
downOffset = Vector( 0, 0, -128 )

-- Trace
traceResult = {}
trace = { collisiongroup: COLLISION_GROUP_PLAYER, mask: MASK_PLAYERSOLID, output: traceResult }

-- Variables
samples, y, theta, radius = 0, 0, 0, 0
tempVector = Vector!
stuckType = 0

--[[

    Stuck Types
    0 - Not stuck
    1 - Stuck in world
    2 - Stuck in entity
    3 - Stuck in player

]]

local entity, start, phys, phys2

thread = coroutine.create ->
    while true
        for _, ply in Iterator!
            unless IsValid( ply )
                goto solved

            if ply.m_iOldStuckCollisionGroup ~= nil
                ply\SetCollisionGroup( ply.m_iOldStuckCollisionGroup or 5 )

            unless Alive( ply )
                goto solved

            if GetMoveType( ply ) ~= MOVETYPE_WALK or IsPlayingTaunt( ply )
                goto solved

            phys = GetPhysicsObject( ply )
            unless phys and phys\IsValid!
                goto solved

            trace.mins, trace.maxs = GetCollisionBounds( ply )

            start = GetPos( ply )
            trace.endpos = start
            trace.start = start
            trace.filter = ply

            TraceHull( trace )

            unless traceResult.Hit
                goto solved

            entity = traceResult.Entity
            if IsValid( entity )
                if entity\IsRagdoll!
                    goto solved


                if entity\IsPlayer!
                    unless entity\Alive! and entity\GetAvoidPlayers!
                        goto solved

                    stuckType = 3
                else
                    phys2 = GetPhysicsObject( entity )
                    if phys2 and phys2\IsValid!
                        if phys2\IsMoveable! and phys2\IsMotionEnabled!
                            unless phys2\IsPenetrating! and phys2\GetMass! >= phys\GetMass!
                                goto solved

                            stuckType = 2
                        else
                            stuckType = 1
            else
                stuckType = 1

            if Run( "PlayerStuck", ply, traceResult, stuckType ) == false
                goto solved

            if stuckType == 3
                entity.m_iOldStuckCollisionGroup = entity\GetCollisionGroup!
                entity\SetCollisionGroup( 15 )

                ply.m_iOldStuckCollisionGroup = ply\GetCollisionGroup!
                ply\SetCollisionGroup( 15 )

                SetUnpacked( tempVector, random( 0, 1 ) == 0 and -512 or 512, random( 0, 1 ) == 0 and -512 or 512, 128 )
                ply\SetVelocity( tempVector )

                wait( 0.25 )
                goto solved

            if stuckType == 2
                goto solved

            if stuckType == 1
                for j = 1, 3
                    samples = 16 * j
                    for i = 0, samples
                        y, theta = 1 - ( i / ( samples - 1 ) ) * 2, phi * i
                        radius = sqrt( 1 - y * y )

                        SetUnpacked( tempVector, cos( theta ) * radius, y, sin( theta ) * radius )
                        trace.start = start + tempVector * 128 * j
                        trace.endpos = trace.start
                        TraceHull( trace )

                        unless traceResult.Hit
                            trace.endpos = trace.start + downOffset
                            TraceHull( trace )

                            SetPos( ply, traceResult.HitPos )
                            stuckType = 0
                            break

                    if stuckType == 0
                        break

            if stuckType ~= 0
                spawnPoint = Run( "PlayerSelectSpawn", ply, false )
                if spawnPoint and IsValid( spawnPoint )
                    SetPos( ply, GetPos( spawnPoint ) )
                else
                    SetPos( ply, vector_origin )

            ::solved::
            yield!

        yield!

do

    ustuck_enabled = CreateConVar( "ustuck_enabled", "1", FCVAR_ARCHIVE, "Enable unstuck logic for players." )\GetBool!
    cvars.AddChangeCallback( "ustuck_enabled", ( _, __, value ) ->
        ustuck_enabled = value == "1"
    addonName )

    ok, msg = false, nil

    timer.Create addonName, 0.05, 0, ->
        unless ustuck_enabled
            return

        ok, msg = resume( thread )
        unless ok
            ErrorNoHaltWithStack( msg )
